plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'java'
    id 'maven-publish'
}

configurations {
    jossoAgent { transitive = false }
}

dependencies {
    implementation project(':cli')

    def jossoVersion = System.properties['josso.version']?:"2.1.5-custom-component-keeper-factory-SNAPSHOT"
    // println "josso version: '${jossoVersion}'"
    jossoAgent "com.opuscapita.josso:tomcat7-agent-oce:${jossoVersion}:bin@zip"
}

task unzipJosso(type: Copy) {
    from zipTree(configurations.jossoAgent.singleFile).matching {
        // we ned only jar files
        // josso agent also contains 'josso-agent-config.xml'
        // but this file we would create/configure from scratch at
        // application startup
        include '*/lib/*.jar'
    }
    eachFile {fcp ->
        fcp.path = "./"
        fcp.name = fcp.sourceName
    }
    into "$buildDir/josso-agent"
    includeEmptyDirs = false
}
shadowJar.dependsOn(unzipJosso)

shadowJar {
    def applicationWarFilePath = System.properties['application.war']
    doFirst {
        // as a first step validate that application war file path is specified
        if (!applicationWarFilePath) {
            throw new GradleException("System property 'application.war' value is not defined!")
        }
        if (!new File(applicationWarFilePath).exists()) {
            throw new GradleException("Application war file is not found by path '${applicationWarFilePath}'!")
        }
        // add josso agent libraries (jar files) into archive
        from(new File("$buildDir/josso-agent").listFiles())
    }

    // excluding dependencies that are used for tests
    // dependencies {
    //     exclude(dependency(':testng:'))
    //     exclude(dependency(':junit:'))
    //     // exclude(dependency('org.codehaus.groovy:'))
    //     exclude(dependency('org.spockframework:'))
    // }

    manifest {
        // defining class that runs and configure application
        attributes 'Main-Class': 'com.opuscapita.tomcat.embedded.Main'
    }

    // result jar file will have name <...>-executable.jar
    classifier = 'executable'

    // copy original war file into result JAR
    // into 'META-INF' filder by name 'application.war'
    from (applicationWarFilePath) {
        into ("META-INF")
        rename {fileName -> 'application.war'}
    }
}

task('configureShadowPublish') {
    doFirst {
        def groupId = System.properties['application.groupId']
        def artifactId = System.properties['application.artifactId']
        def version = System.properties['application.version']

        // as a first step validate that application war file path is specified
        if (!groupId) {
            throw new GradleException("System property 'application.groupId' value is not defined!")
        }
        if (!artifactId) {
            throw new GradleException("System property 'application.artifactId' value is not defined!")
        }
        if (!version) {
            throw new GradleException("System property 'application.version' value is not defined!")
        }

        publishing.publications.shadow.groupId = groupId
        publishing.publications.shadow.artifactId = artifactId
        publishing.publications.shadow.version = version

        println " "
        println "Maven coordinates (that will be used for publishing executable jar):"
        println "- groupId: '${groupId}'"
        println "- artifactId '${artifactId}'"
        println "- version '${version}'"
    }
}
publish.dependsOn(configureShadowPublish)

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
}

// task for checking whick repositories are configured
task listRepositories {
    doLast {
        println "Repositories:"
        project.repositories.each {
           println "Name: ${it.name}; url: ${it.url}"
        }
   }
}
